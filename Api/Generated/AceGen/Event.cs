/********************************************************************************
 * generated by de.acegen
 ********************************************************************************/




namespace AceGen
{
    public class Event<T> : IEvent<T> where T : IDataContainer
    {
        public string EventName { get; set; }
        private ViewProvider viewProvider;

        public Event(string eventName, ViewProvider viewProvider)
        {
            this.EventName = eventName;
            this.viewProvider = viewProvider;
        }

        public void notifyListeners(T data)
        {
            var consumerList = this.viewProvider.GetConsumerForEvent(this.EventName);
            if (consumerList != null)
            {
                foreach (Action<IDataContainer> consumer in consumerList)
                {
                    consumer(data);
                }
            }
            else if (this.viewProvider.GetAfterCommitConsumerForEvent(this.EventName) == null)
            {
                Console.WriteLine($"No listeners for {this.EventName} found. Did you forget to register them?");
            }
        }

        public void notifyAfterCommitListeners(T data)
        {
            var consumerList = this.viewProvider.GetAfterCommitConsumerForEvent(this.EventName);
            if (consumerList != null)
            {
                foreach (Action<IDataContainer> consumer in consumerList)
                {
                    consumer(data);
                }
            }
            else if (this.viewProvider.GetConsumerForEvent(this.EventName) == null)
            {

                Console.WriteLine($"No listeners for {this.EventName} found. Did you forget to register them?");
            }
        }

        public void publish(T data)
        {
			this.notifyListeners(data);
        }

        public void publishAfterCommit(T data)
        {
			this.notifyAfterCommitListeners(data);
        }
    }
}





/******* S.D.G. *******/



